name: Deploy to EC2 on master push

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto' # Ou 'temurin', 'adopt' etc., conforme sua preferência

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "target/casa-moreno-backend-0.0.1-SNAPSHOT.jar"
          target: ${{ secrets.REMOTE_PATH }}/ # Copia o JAR diretamente para o diretório remoto

      - name: Run application on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # Mata qualquer processo Java anterior para evitar conflitos de porta
            echo "Tentando parar qualquer processo Java existente..."
            # Encontra e mata processos Java rodando o seu JAR específico
            # ATENÇÃO: Verifique o nome exato do seu JAR no comando abaixo
            pkill -f "java -jar.*casa-moreno-backend-0.0.1-SNAPSHOT.jar" || true
            sleep 5 # Dê um tempo para o processo ser encerrado
            
            # Remove o JAR antigo (recomendado para garantir que a versão mais nova seja executada)
            echo "Removendo JAR antigo..."
            rm -f ${{ secrets.REMOTE_PATH }}/casa-moreno-backend-001-SNAPSHOT.jar
            
            # Move o novo JAR para o local correto (se o scp-action copiou para um diretório temporário)
            # NOTA: Com 'target: ${{ secrets.REMOTE_PATH }}/', o JAR já deve estar no local certo.
            # Se você usou 'target: ${{ secrets.REMOTE_PATH }}/target/', o JAR estaria em '.../target/casa-moreno-backend-0.0.1-SNAPSHOT.jar'
            # Você pode ajustar o 'rm -f' e o 'nohup java -jar' para refletir isso.
            
            # Inicia a aplicação em background usando 'nohup' para que ela continue rodando após o SSH fechar
            echo "Iniciando a aplicação Java em background..."
            nohup java -jar ${{ secrets.REMOTE_PATH }}/casa-moreno-backend-001-SNAPSHOT.jar > ${{ secrets.REMOTE_PATH }}/application.log 2>&1 &
            
            echo "Aplicação iniciada. Verificando os últimos logs..."
            sleep 10 # Aguarde um pouco para a aplicação começar a escrever logs
            tail -n 50 ${{ secrets.REMOTE_PATH }}/application.log
            
            # --- Importante para evitar o erro "Process exited with status 143" ---
            # Dê um tempo extra para o 'nohup' se desvincular completamente da sessão SSH
            echo "Finalizando conexão SSH de forma segura..."
            sleep 5